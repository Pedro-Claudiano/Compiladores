
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\036\002\000\002\002\004\000\002\002" +
    "\004\000\002\037\002\000\002\040\002\000\002\005\011" +
    "\000\002\003\004\000\002\003\002\000\002\041\002\000" +
    "\002\042\002\000\002\043\002\000\002\044\002\000\002" +
    "\004\017\000\002\023\004\000\002\023\002\000\002\045" +
    "\002\000\002\024\006\000\002\024\004\000\002\030\004" +
    "\000\002\030\002\000\002\046\002\000\002\031\005\000" +
    "\002\031\003\000\002\031\003\000\002\047\002\000\002" +
    "\050\002\000\002\027\011\000\002\051\002\000\002\025" +
    "\006\000\002\032\003\000\002\032\003\000\002\052\002" +
    "\000\002\032\007\000\002\006\004\000\002\006\002\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\034\003\000\002\034\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\053\002\000\002\011\010\000\002\054\002\000\002\011" +
    "\006\000\002\055\002\000\002\011\006\000\002\056\002" +
    "\000\002\010\007\000\002\057\002\000\002\060\002\000" +
    "\002\010\010\000\002\021\003\000\002\061\002\000\002" +
    "\021\007\000\002\022\003\000\002\062\002\000\002\022" +
    "\007\000\002\063\002\000\002\012\006\000\002\064\002" +
    "\000\002\012\006\000\002\065\002\000\002\013\006\000" +
    "\002\066\002\000\002\013\006\000\002\067\002\000\002" +
    "\014\006\000\002\070\002\000\002\071\002\000\002\015" +
    "\012\000\002\072\002\000\002\016\005\000\002\016\002" +
    "\000\002\073\002\000\002\017\016\000\002\074\002\000" +
    "\002\075\002\000\002\020\011\000\002\035\006\000\002" +
    "\035\006\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\004\000\002\033\004\000\002\076\002\000\002" +
    "\033\006\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\017\001\047\001\001\002\000\006\017" +
    "\ufffa\047\ufffa\001\002\000\004\002\006\001\002\000\004" +
    "\002\uffff\001\002\000\006\017\013\047\012\001\002\000" +
    "\004\002\000\001\002\000\006\017\ufffb\047\ufffb\001\002" +
    "\000\010\024\251\025\253\053\254\001\002\000\004\020" +
    "\ufffe\001\002\000\004\020\015\001\002\000\030\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\031\ufffd\037\ufffd\045" +
    "\ufffd\051\ufffd\054\ufffd\060\ufffd\001\002\000\030\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\031\uffdf\037\uffdf\045" +
    "\uffdf\051\uffdf\054\uffdf\060\uffdf\001\002\000\030\021\041" +
    "\022\020\023\036\024\037\025\021\031\042\037\030\045" +
    "\047\051\025\054\031\060\032\001\002\000\016\005\055" +
    "\010\056\030\051\054\050\055\052\056\054\001\002\000" +
    "\004\054\uffd2\001\002\000\004\054\234\001\002\000\040" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\034" +
    "\uffe0\035\uffe0\037\uffe0\044\uffe0\045\uffe0\046\uffe0\051\uffe0" +
    "\054\uffe0\060\uffe0\001\002\000\040\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\031\uffda\034\uffda\035\uffda\037\uffda" +
    "\044\uffda\045\uffda\046\uffda\051\uffda\054\uffda\060\uffda\001" +
    "\002\000\020\005\uffe6\010\uffe6\030\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\001\002\000\040\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\031\uffd4\034\uffd4\035\uffd4\037\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\051\uffd4\054\uffd4\060\uffd4\001" +
    "\002\000\042\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\031\uffd6\034\uffd6\035\uffd6\036\uffc6\037\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\051\uffd6\054\uffd6\060\uffd6\001\002\000\004" +
    "\054\174\001\002\000\010\010\147\012\114\036\150\001" +
    "\002\000\020\005\055\010\056\030\051\054\050\055\052" +
    "\056\054\057\141\001\002\000\040\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\031\uffd9\034\uffd9\035\uffd9\037\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\051\uffd9\054\uffd9\060\uffd9\001" +
    "\002\000\040\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\031\uffde\034\uffde\035\uffde\037\uffde\044\uffde\045\uffde\046" +
    "\uffde\051\uffde\054\uffde\060\uffde\001\002\000\040\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\031\uffd7\034\uffd7\035" +
    "\uffd7\037\uffd7\044\uffd7\045\uffd7\046\uffd7\051\uffd7\054\uffd7" +
    "\060\uffd7\001\002\000\020\005\055\010\056\030\051\054" +
    "\050\055\052\056\054\057\133\001\002\000\004\054\uffd3" +
    "\001\002\000\040\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\031\uffdd\034\uffdd\035\uffdd\037\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\051\uffdd\054\uffdd\060\uffdd\001\002\000\004\002" +
    "\ufffc\001\002\000\016\005\055\010\056\030\051\054\050" +
    "\055\052\056\054\001\002\000\040\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\031\uffdc\034\uffdc\035\uffdc\037\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\051\uffdc\054\uffdc\060\uffdc\001" +
    "\002\000\040\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\031\uffd5\034\uffd5\035\uffd5\037\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\051\uffd5\054\uffd5\060\uffd5\001\002\000\040\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\031\uffd8\034\uffd8\035" +
    "\uffd8\037\uffd8\044\uffd8\045\uffd8\046\uffd8\051\uffd8\054\uffd8" +
    "\060\uffd8\001\002\000\040\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\031\uffdb\034\uffdb\035\uffdb\037\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\051\uffdb\054\uffdb\060\uffdb\001\002\000" +
    "\016\005\055\010\056\030\051\054\050\055\052\056\054" +
    "\001\002\000\062\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\114\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\026\uff99\027\uff99\030\uff99\032\uff99\033\uff99\041\uff99\042" +
    "\uff99\043\uff99\050\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\001\002\000\016\005\055\010\056\030\051\054\050\055" +
    "\052\056\054\001\002\000\060\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\011\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\026\uff98\027\uff98\030\uff98\032\uff98\033\uff98\041\uff98" +
    "\042\uff98\043\uff98\050\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\001\002\000\060\004\uff96\005\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\013\uff96\014\uff96\015\uff96\016\uff96\026" +
    "\uff96\027\uff96\030\uff96\032\uff96\033\uff96\041\uff96\042\uff96" +
    "\043\uff96\050\uff96\053\uff96\054\uff96\055\uff96\056\uff96\001" +
    "\002\000\060\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97" +
    "\011\uff97\013\uff97\014\uff97\015\uff97\016\uff97\026\uff97\027" +
    "\uff97\030\uff97\032\uff97\033\uff97\041\uff97\042\uff97\043\uff97" +
    "\050\uff97\053\uff97\054\uff97\055\uff97\056\uff97\001\002\000" +
    "\016\005\055\010\056\030\051\054\050\055\052\056\054" +
    "\001\002\000\016\005\055\010\056\030\051\054\050\055" +
    "\052\056\054\001\002\000\026\004\064\005\060\006\066" +
    "\007\061\014\070\015\063\016\065\026\071\027\067\043" +
    "\uffab\001\002\000\016\005\055\010\056\030\051\054\050" +
    "\055\052\056\054\001\002\000\016\005\055\010\056\030" +
    "\051\054\050\055\052\056\054\001\002\000\004\043\101" +
    "\001\002\000\016\005\055\010\056\030\051\054\050\055" +
    "\052\056\054\001\002\000\016\005\055\010\056\030\051" +
    "\054\050\055\052\056\054\001\002\000\016\005\055\010" +
    "\056\030\051\054\050\055\052\056\054\001\002\000\016" +
    "\005\055\010\056\030\051\054\050\055\052\056\054\001" +
    "\002\000\016\005\055\010\056\030\051\054\050\055\052" +
    "\056\054\001\002\000\016\005\055\010\056\030\051\054" +
    "\050\055\052\056\054\001\002\000\016\005\055\010\056" +
    "\030\051\054\050\055\052\056\054\001\002\000\060\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\026\uff9f\027\uff9f\030\uff9f\032" +
    "\uff9f\033\uff9f\041\uff9f\042\uff9f\043\uff9f\050\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\001\002\000\060\004\064\005" +
    "\060\006\066\007\061\010\uffa2\011\uffa2\013\uffa2\014\uffa2" +
    "\015\063\016\065\026\071\027\067\030\uffa2\032\uffa2\033" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\050\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\001\002\000\060\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\026\uff9e\027\uff9e\030\uff9e\032\uff9e\033\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\050\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\001\002\000\060\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\026\071\027\067\030\uffa4\032\uffa4\033\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\050\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\001\002\000\060\004\064\005\060\006\066\007\061\010" +
    "\uffa0\011\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\026\071" +
    "\027\067\030\uffa0\032\uffa0\033\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\050\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002" +
    "\000\060\004\uffa6\005\uffa6\006\066\007\061\010\uffa6\011" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\026\071\027\067" +
    "\030\uffa6\032\uffa6\033\uffa6\041\uffa6\042\uffa6\043\uffa6\050" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\001\002\000\060" +
    "\004\064\005\060\006\066\007\061\010\uffa1\011\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\026\071\027\067\030\uffa1" +
    "\032\uffa1\033\uffa1\041\uffa1\042\uffa1\043\uffa1\050\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\001\002\000\030\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\031\uffaa\037\uffaa\045\uffaa\046" +
    "\uffaa\051\uffaa\054\uffaa\060\uffaa\001\002\000\030\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\031\uffdf\037\uffdf\045\uffdf\046" +
    "\uffdf\051\uffdf\054\uffdf\060\uffdf\001\002\000\030\022\020" +
    "\023\036\024\037\025\021\031\042\037\030\045\047\046" +
    "\104\051\025\054\031\060\032\001\002\000\040\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\031\uffa9\034\uffa9\035" +
    "\uffa9\037\uffa9\044\uffa9\045\uffa9\046\uffa9\051\uffa9\054\uffa9" +
    "\060\uffa9\001\002\000\060\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\026\071\027\067\030\uffa3\032\uffa3\033\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\050\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\001\002\000\060\004\uffa5\005\uffa5\006\066\007\061\010" +
    "\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\026\071" +
    "\027\067\030\uffa5\032\uffa5\033\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\050\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\001\002" +
    "\000\026\004\064\005\060\006\066\007\061\011\uff9b\014" +
    "\070\015\063\016\065\026\071\027\067\001\002\000\004" +
    "\011\111\001\002\000\060\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\032\uff9a\033\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\050\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\001\002\000\060\004\uff9c\005\uff9c\006\066\007\061\010" +
    "\uff9c\011\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\026\071" +
    "\027\067\030\uff9c\032\uff9c\033\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\050\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\001\002" +
    "\000\060\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\032\uff9d\033\uff9d\041\uff9d\042\uff9d\043\uff9d\050" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\001\002\000\016" +
    "\005\055\010\056\030\051\054\050\055\115\056\054\001" +
    "\002\000\026\004\uff98\005\uff98\006\uff98\007\uff98\013\120" +
    "\014\uff98\015\uff98\016\uff98\026\uff98\027\uff98\001\002\000" +
    "\026\004\064\005\060\006\066\007\061\013\117\014\070" +
    "\015\063\016\065\026\071\027\067\001\002\000\116\004" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\056\uffa7\060\uffa7\001\002\000" +
    "\116\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8" +
    "\051\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\060\uffa8\001" +
    "\002\000\026\004\064\005\060\006\066\007\061\014\070" +
    "\015\063\016\065\026\071\027\067\033\uffb3\001\002\000" +
    "\004\033\123\001\002\000\032\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\031\uffb2\034\uffb2\035\uffb2\037\uffb2\045\uffb2\051" +
    "\uffb2\054\uffb2\060\uffb2\001\002\000\032\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\031\uffdf\034\uffdf\035\uffdf\037\uffdf\045" +
    "\uffdf\051\uffdf\054\uffdf\060\uffdf\001\002\000\032\022\020" +
    "\023\036\024\037\025\021\031\042\034\127\035\uffae\037" +
    "\030\045\047\051\025\054\031\060\032\001\002\000\004" +
    "\035\132\001\002\000\030\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\031\uffb0\035\uffb0\037\uffb0\045\uffb0\051\uffb0\054\uffb0" +
    "\060\uffb0\001\002\000\030\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\031\uffdf\035\uffdf\037\uffdf\045\uffdf\051\uffdf\054\uffdf" +
    "\060\uffdf\001\002\000\030\022\020\023\036\024\037\025" +
    "\021\031\042\035\uffaf\037\030\045\047\051\025\054\031" +
    "\060\032\001\002\000\040\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\031\uffb1\034\uffb1\035\uffb1\037\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\051\uffb1\054\uffb1\060\uffb1\001\002\000" +
    "\004\032\uffbb\001\002\000\026\004\064\005\060\006\066" +
    "\007\061\014\070\015\063\016\065\026\071\027\067\032" +
    "\uffbd\001\002\000\004\032\136\001\002\000\040\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\031\uffbc\034\uffbc\035" +
    "\uffbc\037\uffbc\044\uffbc\045\uffbc\046\uffbc\051\uffbc\054\uffbc" +
    "\060\uffbc\001\002\000\004\032\140\001\002\000\040\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\031\uffba\034\uffba" +
    "\035\uffba\037\uffba\044\uffba\045\uffba\046\uffba\051\uffba\054" +
    "\uffba\060\uffba\001\002\000\004\032\uffb9\001\002\000\026" +
    "\004\064\005\060\006\066\007\061\014\070\015\063\016" +
    "\065\026\071\027\067\032\uffb7\001\002\000\004\032\144" +
    "\001\002\000\040\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\031\uffb6\034\uffb6\035\uffb6\037\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\051\uffb6\054\uffb6\060\uffb6\001\002\000\004\032" +
    "\146\001\002\000\040\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\031\uffb8\034\uffb8\035\uffb8\037\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\051\uffb8\054\uffb8\060\uffb8\001\002\000\022" +
    "\005\uffe9\010\uffe9\011\uffe9\030\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\001\002\000\016\005\uffc8\010\uffc8\030\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\001\002\000\016\005\055\010" +
    "\056\030\051\054\152\055\052\056\054\001\002\000\032" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\156\012\114\014" +
    "\uff99\015\uff99\016\uff99\026\uff99\027\uff99\032\uff99\001\002" +
    "\000\004\032\155\001\002\000\026\004\064\005\060\006" +
    "\066\007\061\014\070\015\063\016\065\026\071\027\067" +
    "\032\uffc3\001\002\000\040\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\031\uffc7\034\uffc7\035\uffc7\037\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\051\uffc7\054\uffc7\060\uffc7\001\002\000" +
    "\022\005\uffc2\010\uffc2\011\uffc2\030\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\001\002\000\022\005\uffee\010\uffee\011" +
    "\uffee\030\uffee\053\uffee\054\uffee\055\uffee\056\uffee\001\002" +
    "\000\022\005\055\010\056\011\163\030\051\053\161\054" +
    "\050\055\052\056\054\001\002\000\022\005\uffea\010\uffea" +
    "\011\uffea\030\uffea\053\uffea\054\uffea\055\uffea\056\uffea\001" +
    "\002\000\022\005\uffef\010\uffef\011\uffef\030\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\001\002\000\004\032\uffc1\001" +
    "\002\000\044\004\064\005\060\006\066\007\061\010\uffeb" +
    "\011\uffeb\014\070\015\063\016\065\026\071\027\067\030" +
    "\uffeb\050\uffed\053\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002" +
    "\000\004\050\166\001\002\000\022\005\uffec\010\uffec\011" +
    "\uffec\030\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001\002" +
    "\000\022\005\uffee\010\uffee\011\uffee\030\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\001\002\000\022\005\055\010\056" +
    "\011\171\030\051\053\161\054\050\055\052\056\054\001" +
    "\002\000\004\032\uffe8\001\002\000\004\032\173\001\002" +
    "\000\040\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\031" +
    "\uffe7\034\uffe7\035\uffe7\037\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\051\uffe7\054\uffe7\060\uffe7\001\002\000\004\040\175\001" +
    "\002\000\016\005\055\010\056\030\051\054\050\055\052" +
    "\056\054\001\002\000\026\004\064\005\060\006\066\007" +
    "\061\014\070\015\063\016\065\026\071\027\067\041\177" +
    "\001\002\000\016\005\055\010\056\030\051\054\050\055" +
    "\052\056\054\001\002\000\026\004\064\005\060\006\066" +
    "\007\061\014\070\015\063\016\065\026\071\027\067\042" +
    "\201\001\002\000\016\005\055\010\056\030\051\054\050" +
    "\055\052\056\054\001\002\000\026\004\064\005\060\006" +
    "\066\007\061\014\070\015\063\016\065\026\071\027\067" +
    "\043\203\001\002\000\030\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\031\uffad\037\uffad\044\uffad\045\uffad\051\uffad\054\uffad" +
    "\060\uffad\001\002\000\030\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\031\uffdf\037\uffdf\044\uffdf\045\uffdf\051\uffdf\054\uffdf" +
    "\060\uffdf\001\002\000\030\022\020\023\036\024\037\025" +
    "\021\031\042\037\030\044\206\045\047\051\025\054\031" +
    "\060\032\001\002\000\040\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\031\uffac\034\uffac\035\uffac\037\uffac\044\uffac" +
    "\045\uffac\046\uffac\051\uffac\054\uffac\060\uffac\001\002\000" +
    "\004\036\210\001\002\000\016\005\uffc5\010\uffc5\030\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\001\002\000\016\005\055\010" +
    "\056\030\051\054\213\055\052\056\054\001\002\000\004" +
    "\032\221\001\002\000\032\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\215\012\114\014\uff99\015\uff99\016\uff99\026\uff99" +
    "\027\uff99\032\uff99\001\002\000\026\004\064\005\060\006" +
    "\066\007\061\014\070\015\063\016\065\026\071\027\067" +
    "\032\uffc0\001\002\000\022\005\uffbf\010\uffbf\011\uffbf\030" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\001\002\000\022" +
    "\005\uffee\010\uffee\011\uffee\030\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\001\002\000\022\005\055\010\056\011\220" +
    "\030\051\053\161\054\050\055\052\056\054\001\002\000" +
    "\004\032\uffbe\001\002\000\040\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\031\uffc4\034\uffc4\035\uffc4\037\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\051\uffc4\054\uffc4\060\uffc4\001\002" +
    "\000\020\005\055\010\056\030\051\053\223\054\225\055" +
    "\052\056\054\001\002\000\004\032\uffe3\001\002\000\004" +
    "\032\233\001\002\000\032\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\227\012\114\014\uff99\015\uff99\016\uff99\026\uff99" +
    "\027\uff99\032\uff99\001\002\000\026\004\064\005\060\006" +
    "\066\007\061\014\070\015\063\016\065\026\071\027\067" +
    "\032\uffe4\001\002\000\022\005\uffe2\010\uffe2\011\uffe2\030" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\022" +
    "\005\uffee\010\uffee\011\uffee\030\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\001\002\000\022\005\055\010\056\011\232" +
    "\030\051\053\161\054\050\055\052\056\054\001\002\000" +
    "\004\032\uffe1\001\002\000\040\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\031\uffe5\034\uffe5\035\uffe5\037\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\051\uffe5\054\uffe5\060\uffe5\001\002" +
    "\000\010\012\114\032\uffcc\036\241\001\002\000\004\032" +
    "\uffca\001\002\000\004\032\237\001\002\000\040\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\031\uffc9\034\uffc9\035" +
    "\uffc9\037\uffc9\044\uffc9\045\uffc9\046\uffc9\051\uffc9\054\uffc9" +
    "\060\uffc9\001\002\000\004\032\245\001\002\000\016\005" +
    "\055\010\056\030\051\054\050\055\052\056\054\001\002" +
    "\000\026\004\064\005\060\006\066\007\061\014\070\015" +
    "\063\016\065\026\071\027\067\032\uffce\001\002\000\004" +
    "\032\244\001\002\000\040\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\031\uffcd\034\uffcd\035\uffcd\037\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\051\uffcd\054\uffcd\060\uffcd\001\002\000" +
    "\040\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\031\uffcb" +
    "\034\uffcb\035\uffcb\037\uffcb\044\uffcb\045\uffcb\046\uffcb\051" +
    "\uffcb\054\uffcb\060\uffcb\001\002\000\026\004\064\005\060" +
    "\006\066\007\061\014\070\015\063\016\065\026\071\027" +
    "\067\032\uffb5\001\002\000\004\032\250\001\002\000\040" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\031\uffb4\034" +
    "\uffb4\035\uffb4\037\uffb4\044\uffb4\045\uffb4\046\uffb4\051\uffb4" +
    "\054\uffb4\060\uffb4\001\002\000\004\054\uffd1\001\002\000" +
    "\004\054\255\001\002\000\004\054\uffd0\001\002\000\004" +
    "\054\uffcf\001\002\000\004\010\ufff9\001\002\000\004\010" +
    "\257\001\002\000\010\011\ufff8\024\ufff8\025\ufff8\001\002" +
    "\000\010\011\ufff3\024\ufff3\025\ufff3\001\002\000\010\011" +
    "\262\024\037\025\021\001\002\000\004\020\ufff7\001\002" +
    "\000\004\054\265\001\002\000\010\011\ufff4\024\ufff4\025" +
    "\ufff4\001\002\000\012\011\ufff0\024\ufff0\025\ufff0\050\ufff2" +
    "\001\002\000\004\050\267\001\002\000\010\011\ufff1\024" +
    "\ufff1\025\ufff1\001\002\000\004\020\271\001\002\000\030" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\031\ufff6\037" +
    "\ufff6\045\ufff6\051\ufff6\054\ufff6\060\ufff6\001\002\000\030" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\031\uffdf\037" +
    "\uffdf\045\uffdf\051\uffdf\054\uffdf\060\uffdf\001\002\000\030" +
    "\021\274\022\020\023\036\024\037\025\021\031\042\037" +
    "\030\045\047\051\025\054\031\060\032\001\002\000\006" +
    "\017\ufff5\047\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\002\004\036\003\001\001\000\006\003" +
    "\006\005\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\251\001\001\000\004\037\013\001\001" +
    "\000\002\001\001\000\004\040\015\001\001\000\004\006" +
    "\016\001\001\000\034\007\022\010\037\011\033\012\045" +
    "\013\023\014\042\015\032\017\044\020\034\025\043\027" +
    "\025\034\021\035\026\001\001\000\006\033\245\035\052" +
    "\001\001\000\002\001\001\000\004\035\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\221\001\001" +
    "\000\002\001\001\000\004\057\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\141\035\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\133\035\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\120\035\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\056\035\052\001\001\000" +
    "\002\001\001\000\006\033\112\035\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\111\035\052\001\001\000\006\033\106\035\052\001\001" +
    "\000\004\074\061\001\001\000\006\033\105\035\052\001" +
    "\001\000\006\033\104\035\052\001\001\000\002\001\001" +
    "\000\006\033\077\035\052\001\001\000\006\033\076\035" +
    "\052\001\001\000\006\033\075\035\052\001\001\000\006" +
    "\033\074\035\052\001\001\000\006\033\073\035\052\001" +
    "\001\000\006\033\072\035\052\001\001\000\006\033\071" +
    "\035\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\101\001\001\000" +
    "\004\006\102\001\001\000\034\007\022\010\037\011\033" +
    "\012\045\013\023\014\042\015\032\017\044\020\034\025" +
    "\043\027\025\034\021\035\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\115\035\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\121\001\001\000\002\001\001\000" +
    "\004\071\123\001\001\000\004\006\124\001\001\000\036" +
    "\007\022\010\037\011\033\012\045\013\023\014\042\015" +
    "\032\016\125\017\044\020\034\025\043\027\025\034\021" +
    "\035\026\001\001\000\002\001\001\000\004\072\127\001" +
    "\001\000\004\006\130\001\001\000\034\007\022\010\037" +
    "\011\033\012\045\013\023\014\042\015\032\017\044\020" +
    "\034\025\043\027\025\034\021\035\026\001\001\000\002" +
    "\001\001\000\004\064\136\001\001\000\004\063\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\144\001\001\000\004\066" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\166\001\001\000" +
    "\004\056\150\001\001\000\010\021\152\033\153\035\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\156\001\001\000\004" +
    "\030\157\001\001\000\010\031\161\033\163\035\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\167\001\001\000\010\031\161\033\163" +
    "\035\052\001\001\000\004\050\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\175" +
    "\035\052\001\001\000\002\001\001\000\006\033\177\035" +
    "\052\001\001\000\002\001\001\000\006\033\201\035\052" +
    "\001\001\000\002\001\001\000\004\073\203\001\001\000" +
    "\004\006\204\001\001\000\034\007\022\010\037\011\033" +
    "\012\045\013\023\014\042\015\032\017\044\020\034\025" +
    "\043\027\025\034\021\035\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\210\001\001\000\010\022" +
    "\211\033\213\035\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\215\001\001\000" +
    "\004\030\216\001\001\000\010\031\161\033\163\035\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\223\033\225\035\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\227\001\001\000\004\030\230\001\001\000\010\031\161" +
    "\033\163\035\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\237\001\001\000\004\055\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\241\035\052\001\001\000\004\053\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\255\001\001\000\002\001\001" +
    "\000\004\042\257\001\001\000\004\023\260\001\001\000" +
    "\006\024\263\034\262\001\001\000\004\043\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\271\001\001\000\004\006\272\001\001\000" +
    "\034\007\022\010\037\011\033\012\045\013\023\014\042" +
    "\015\032\017\044\020\034\025\043\027\025\034\021\035" +
    "\026\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      
   public String SCOPE;
    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    class TabelaSimbolo {

       private String tipo;
       private String tam;
       private boolean EhVetor;
       private String scope;
     
      TabelaSimbolo(String tipo,boolean EhVetor){
          this.tipo = tipo;  
          this.EhVetor = EhVetor;
          this.scope = SCOPE;
      }

      TabelaSimbolo(String tipo,boolean EhVetor, String tam){
          this.tipo = tipo;  
          this.EhVetor = EhVetor;
          this.tam = tam;
          this.scope = SCOPE;
      }

      TabelaSimbolo(String tipo,boolean EhVetor, String tam, String scope){
          this.tipo = tipo;  
          this.EhVetor = EhVetor;
          this.tam = tam;
          this.scope = scope;
      }

       public String getTipo(){
          return tipo;
       }

       public boolean getEhVetor() {
          return EhVetor;
       }

       public String getTam() {
          return tam;
       }

       public String getScope() {
         return scope;
       }
  }

  
  private Hashtable<String,TabelaSimbolo> dicionario = new Hashtable<String,TabelaSimbolo>();
  private int pos = 0;
  Stack<String> pilhaAuxiliar = new Stack<String>();
  String v1,v2;

  /* emitir c??digo C */

    public void emit_header() {
       System.out.print("#include <stdio.h>\n");
       System.out.print("#include <stdlib.h>\n");
    }

    public void emit_program(){
       System.out.print("\nint main()");
    }

    public void emit_startblock(){
       System.out.print("{");
       format_code(pos++);
       System.out.print("\n");

    }
 
     public void emit_endblock(){
       format_code(--pos);
       System.out.print("}");
       System.out.print("\n");
       
    }

     public void emit_return(){
       format_code(pos); 
       System.out.print("return 0;\n");

    }

    public void emit_semi(){
        System.out.print(";\n");
    }
                                                                
    public void emit_declaracao_variavel_com_atribuicao(String id, String tipo, String value){

       format_code(pos); 

       if(dicionario.containsKey(id)){
         String v = dicionario.get(id).getScope();
          if(v.equals(SCOPE))
            report_fatal_error("emit_declaracao_variavel_com_atribuicao: Vari??vel duplicada [" + id + "] na fun????o [" + SCOPE + "]",null);
       }
         
       if(tipo.equals("INT")) {
            System.out.print("int " + id + "=" + value);
        } else {
            System.out.print("float " + id + "=" + value);
        }

       dicionario.put(id, new TabelaSimbolo(tipo,false,"0", SCOPE));                                  
       
    }

    public void emit_declaracao_variavel(String id, String tipo){

       format_code(pos); 

       if(dicionario.containsKey(id)){
         String value = dicionario.get(id).getScope();
          if(value.equals(SCOPE))
            report_fatal_error("emit_declaracao_variavel: Vari??vel duplicada [" + id + "] na fun????o [" + SCOPE + "]",null);
       }
         
       if(tipo.equals("INT")) {
            System.out.print("int " + id);
        } else {
            System.out.print("float " + id);
        }

       dicionario.put(id, new TabelaSimbolo(tipo,false,"0", SCOPE)); 
    }

    public void emit_atribuicao(String id, String value){

        format_code(pos);
        checarVariavelNaoDeclarada(id);
        System.out.print(id + "=" + value); 
    }

    public void emit_escreva(String id){

      format_code(pos);
      checarVariavelNaoDeclarada(id);

      TabelaSimbolo t1 = dicionario.get(id);
      String tipo = t1.getTipo();

      if(tipo.equals("INT")) {
          System.out.print("printf(\"\\n%d\"," + id + ")");
      } else {
          System.out.print("printf(\"\\n%f\"," + id + ")");
        }   
      }

    public void emit_texto(String t){
        format_code(pos);

        System.out.print("printf(\"%s\"," + t + ")") ;

      }

    public void emit_escreval(String t){
        format_code(pos);

        System.out.print("printf(\"%s\\n\"," + t + ")") ;

      }

    public void emit_escreval_expressao(String id){

        format_code(pos);  

     TabelaSimbolo t1 = dicionario.get(id);  
      if(t1 == null) {
         report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
      }  

      String tipo = t1.getTipo();

         if(tipo.equals("INT")) {
           System.out.print("printf(\"%d\\n\"," + id + ")") ;
         } else {
            System.out.print("printf(\"%f\\n\"," + id + ")") ;
         }   
      }  

    public void emit_leia(String id){

      format_code(pos);
      checarVariavelNaoDeclarada(id);   

      TabelaSimbolo t1 = dicionario.get(id);   
      String tipo = t1.getTipo();

       if(tipo.equals("INT")) {
          System.out.print("scanf(\"%d\",&" + id + ")");
       } else {
          System.out.print("scanf(\"%f\",&" + id + ")");
        }   
      }

    public void emit_if(String value){
           format_code(pos); 
           
         System.out.print("if("+ value +")");
    }

    public void emit_else(){

           format_code(pos); 

         System.out.print("else");
    }

    public void emit_for(String id, String n1, String n2, String n3){

      format_code(pos); 
      TabelaSimbolo t1 = dicionario.get(id);

      if(t1 == null) {
         report_fatal_error("Vari??vel n??o declarada [" + id + "]",null);
      }

      int passo = Integer.parseInt(n3);

      if (passo >= 0 ){
        System.out.print("for("+ id +" = "+ n1 +";"+ id +" < "+ n2 +";"+ id+ " += "+ n3 +")");
      } else {
        System.out.print("for("+ id +" = "+ n1 +";"+ id +" > "+ n2 +";"+ id+ " += "+ n3 +")");
      }  
      
    }

    public void emit_atribuicao_vetor(String id, String tam, String expressao) {
      format_code(pos);
      checarVariavelNaoDeclarada(id);
      System.out.print(id + "[" + tam + "]" + " = " + expressao);
    }

    public void checarVariavelNaoDeclarada (String id) { 
      if(id.contains("[")){ 
         id = id.substring(0,id.indexOf('[')); 
      }

      if(!dicionario.containsKey(id)){
         String value = dicionario.get(id).getScope();
            if(value.equals(SCOPE))
               report_fatal_error("checarVariavelNaoDeclarada: Vari??vel duplicada [" + id + "] na fun????o [" + SCOPE + "]",null);
      }
    }

    public void emit_declaracao_vetor(String tipo, String id, String tam) {
      format_code(pos);

      if(dicionario.containsKey(id)){
          String value = dicionario.get(id).getScope();
          if(value.equals(SCOPE))
          report_fatal_error("emit_declaracao_vetor: Vari??vel duplicada [" + id + "] na fun????o [" + SCOPE + "]",null);
      }

      if(tipo.equals("INT")){
        System.out.print("int " + id + "[" + tam + "]");
      } else {
        System.out.print("float " + id + "[" + tam + "]");
      }

      dicionario.put(id, new TabelaSimbolo(tipo, true, tam,SCOPE));
    }

   public void emit_while(String value){
        format_code(pos); 
         TabelaSimbolo t1 = dicionario.get(value);  
      if(t1 == null) {
         report_fatal_error("Vari??vel n??o declarada [" + value + "]",null);
      }   
       System.out.print("while("+value+")");
    }

    /* m??todos auxiliares */
     public String checkExpr(String e1, String e2){  
        String tipoE1 = "", tipoE2 = "";  
        String e1aux, e2aux;
        e1aux = e1; e2aux = e2;
     

        if(e1 != null){

          if(e1.contains("[")){ e1 = e1.substring(0,e1.indexOf('[')); }

          checarVariavelNaoDeclarada(e1);
          checarUsoCorretoVetores(e1aux);

           TabelaSimbolo t1 = dicionario.get(e1);  
           if(t1 != null)
              tipoE1 = t1.getTipo();

            if(e2 != null){
               if(e2.contains("[")){ e2 = e2.substring(0,e2.indexOf('[')); }
               checarVariavelNaoDeclarada(e2);
               checarUsoCorretoVetores(e2aux);

               TabelaSimbolo t2 = dicionario.get(e2);  
               if(t2 != null) {
                  tipoE2 = t2.getTipo();
               }

             
            }

        }

        if(! tipoE2.equals("")){

            if(! tipoE1.equals(tipoE2)){
               report_fatal_error("Linguagem n??o permite opera????es com tipos diferentes !",null);
            }
        }

        return tipoE1;
    }

    public void checarUsoCorretoVetores(String id){
      String idaux = id;
 
      if(id.contains("[")){ id = id.substring(0,id.indexOf('[')); }
         if(!dicionario.containsKey(id)){
            String v = dicionario.get(id).getScope();
            if(v.equals(SCOPE))
               report_fatal_error("checarUsoCorretoVetores: Vari??vel duplicada [" + id + "] na fun????o [" + SCOPE + "]",null);
         }

      TabelaSimbolo t1 = dicionario.get(id);

     /*   dicionario.forEach((k, v) -> {
             System.out.format("key: %s, value: %s%n", k, v.getEhVetor());
         }); */

      if(t1 != null){
        if(t1.getEhVetor() == true && (! idaux.contains("["))){
             report_fatal_error("Usando vetor sem ??ndice [" + id + "]",null);
        }
      }

    }

   public void emit_parameter_declaration(String id){

      checarVariavelNaoDeclarada(id);
      System.out.print(id.trim()); 
   
    }

     public void format_code(int pos){
       for(int i=0; i < pos * 3; i++){
          System.out.print(" ");  
       }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 emit_header(); System.out.print("\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // header ::= NT$0 program 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= header EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 SCOPE="MAIN"; emit_program(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_startblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= function_list PROGRAM NT$1 STARTPRG NT$2 list_command ENDPRG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_endblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_list ::= function_list function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 SCOPE=name; System.out.print(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 System.out.print("("); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 System.out.print(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
 emit_startblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= PROCEDURE return_type ID NT$3 LPAREN NT$4 parameter_list RPAREN NT$5 STARTPRG NT$6 list_command ENDPRG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		 emit_endblock(); System.out.print("\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter_list ::= parameter_list parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declaracao_variavel(id, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter ::= tipo ID NT$7 COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.print(", "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameter ::= tipo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 emit_declaracao_variavel(id, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // call_parameter_list ::= call_parameter_list call_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_parameter_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // call_parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_parameter_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$8 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_parameter_declaration(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // call_parameter ::= expr NT$8 COMMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.print(","); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_parameter",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // call_parameter ::= expr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 emit_parameter_declaration(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_parameter",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // call_parameter ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_parameter",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 format_code(pos); System.out.print(i + "("); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 System.out.print(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_call ::= ID LPAREN NT$9 call_parameter_list RPAREN NT$10 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Object RESULT =null;
 format_code(pos); System.out.print("return "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // return_function ::= RETURN NT$11 return_function_type SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.print(";\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_function",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // return_function_type ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_function_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // return_function_type ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_function_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$12 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.print(i + "("); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_function_type ::= ID LPAREN NT$12 call_parameter_list RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.print(")");     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_function_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list_command ::= list_command command 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // list_command ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // command ::= declare_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // command ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // command ::= readl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // command ::= writel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // command ::= writell 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // command ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // command ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // command ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // command ::= vetor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // command ::= return_function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // command ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= DECLINT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "INT"  ;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= DECLFLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "FLOAT";     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // return_type ::= DECLINT 
            {
              Object RESULT =null;
		 RESULT = "INT" ;  System.out.print("int ");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // return_type ::= DECLFLOAT 
            {
              Object RESULT =null;
		 RESULT = "FLOAT"; System.out.print("float "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return_type ::= VOID 
            {
              Object RESULT =null;
		 RESULT = "VOID";  System.out.print("void ");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$13 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declaracao_variavel_com_atribuicao(id,  t,  value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declare_variable ::= tipo ID ASSIGN expr NT$13 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$14 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declaracao_variavel(id,t);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declare_variable ::= tipo ID NT$14 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$15 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_declaracao_vetor(t, pilhaAuxiliar.pop(), pilhaAuxiliar.pop()); pilhaAuxiliar.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declare_variable ::= tipo vetor NT$15 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 emit_semi();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$16 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 format_code(pos); System.out.print(id + "="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= ID ASSIGN NT$16 assignment_types SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$17 ::= 
            {
              Object RESULT =null;
 v1 = pilhaAuxiliar.pop(); v2 = pilhaAuxiliar.pop(); pilhaAuxiliar.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 format_code(pos); System.out.print(v1 + "[" + v2 + "]=" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignment ::= vetor NT$17 ASSIGN NT$18 array_assignment_types SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignment_types ::= expr 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.print(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_types",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$19 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.print(i + "("); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment_types ::= ID LPAREN NT$19 call_parameter_list RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.print(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_types",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // array_assignment_types ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 emit_atribuicao_vetor(v1, v2, e); pilhaAuxiliar.clear();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_assignment_types",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$20 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.print(i + "("); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // array_assignment_types ::= ID LPAREN NT$20 call_parameter_list RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.print(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_assignment_types",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$21 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_escreva(value);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // writel ::= WRITELINE expr NT$21 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$22 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_texto(t);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // writel ::= WRITELINE TEXTO NT$22 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$23 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_escreval(t);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // writell ::= ESCREVAL TEXTO NT$23 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writell",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$24 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_escreval_expressao(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // writell ::= ESCREVAL expr NT$24 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writell",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$25 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_leia(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // readl ::= READLINE expr NT$25 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$26 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_if(value);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 emit_startblock();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if ::= IFF expr NT$26 THENN NT$27 list_command elsepart ENDELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 emit_endblock();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$28 ::= 
            {
              Object RESULT =null;
 emit_endblock(); emit_else(); emit_startblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elsepart ::= ELSEE NT$28 list_command 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsepart",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elsepart ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsepart",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$29 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_for(id,n1,n2,n3); emit_startblock();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for ::= PARA ID DE expr ATE expr PASSO expr FACA NT$29 list_command FIMPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  emit_endblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$30 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_while(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 emit_startblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // while ::= ENQUANTO expr NT$30 FACA NT$31 list_command FIMENQUANTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 emit_endblock();   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // vetor ::= ID LBRCKT INTT RBRCKT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i + "["+z+"]"; pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // vetor ::= ID LBRCKT expr RBRCKT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i + "["+z+"]"; pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "+" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "-" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr TIMES expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "*" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "/" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= expr EQUALS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "==" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= expr GREATER expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + ">" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= expr LESS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "<" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= expr E expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "&&" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr OU expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "||" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= NAO expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =   "!" + e1;    ;                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =   "-" + e1;    ;                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$32 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT =  "(" + e1  + ")"; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,null),false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= LPAREN expr NT$32 RPAREN 
            {
              String RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;  /* detectar variavel nao declarada */ checkExpr(i,null);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= INTT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;  dicionario.put(RESULT,new TabelaSimbolo("INT",false));               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= FLOATT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;  dicionario.put(RESULT,new TabelaSimbolo("FLOAT",false));             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= vetor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(v, null), true));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
